
# Generated by stc version 0.7.3
# date                    : 2017/08/07 22:27:18
# Turbine version         : 1.0.0
# Input filename          : /home/zombaki/Project/swiftCode/testFunc/cpp/newa/wormSegmenter/wormSegment.swift
# Output filename         : /home/zombaki/Project/swiftCode/testFunc/cpp/newa/wormSegmenter/wormSegment.tcl
# STC home                : /usr/lib/stc
# Turbine home            : /usr/lib/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : wormSegment.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : wormSegment.tcl
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /usr/lib/stc
# stc.turbine.version           : 1.0.0
# stc.turbine_home              : /usr/lib/turbine
# stc.version                   : 0.7.3

# Metadata:

package require turbine 1.0.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require wormsegmenter 0.0


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: file t:5 EXPR_TEMPORARY wormSegment.swift:9:28
    # Var: $file v:t:5 VALUE_OF [file:__t:5]
    # Var: $file v:t:5:1 VALUE_OF [file:__t:5]
    # Var: $string$[int] v:inputF VALUE_OF [string[int]:inputF]
    # Var: string[int] u:A wormSegment.swift:8:0
    # Var: file u:outputFile wormSegment.swift:20:17
    # Var: string[int] u:inputF wormSegment.swift:9:0
    lassign [ adlb::multicreate [ list container integer string 1 32000 2 ] [ list container integer string 32000 1 4 ] ] u:A u:inputF
    turbine::c::log "allocated u:A=<${u:A}> u:inputF=<${u:inputF}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 1 ] [ list file 0 1 3 ] ] [ list 0 1 ] ] t:5 u:outputFile
    set tcltmp:init_rc 1
    set v:t:5 [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:t:5 "input.txt"
    turbine::store_file ${t:5} v:t:5 1
    set v:t:5:1 [ turbine::retrieve_file ${t:5} CACHED 1 ]
    set v:inputF [ turbine::file_lines_impl ${v:t:5:1} ]
    turbine::build_rec ${u:inputF} ${v:inputF} [ list container integer string ] 0 1
    turbine::set_filename_val ${u:outputFile} "output.txt"
    turbine::rule [ list ${u:A} ] "string_join-argwait ${u:A} {${u:outputFile}}"
    __entry-range1:outer ${u:A} ${u:inputF} 0 31999 1
    turbine::decr_local_file_refcount v:t:5
}


proc string_join-argwait { u:A u:outputFile } {
    # Var: $string$[int] v:A RENAMED [$string$[int]:__v:A]
    # Var: $string v:s RENAMED [$string:__v:s]
    # Var: $file v:outputFile VALUE_OF [file:outputFile]
    set v:A [ turbine::enumerate_rec ${u:A} [ list container string ] 0 1 ]
    set v:s [ turbine::string_join_impl ${v:A} "" ]
    set tcltmp:init_rc 2
    set v:outputFile [ turbine::create_local_file_ref "output.txt" ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:outputFile ${v:s}
    turbine::store_file ${u:outputFile} v:outputFile 0
}


proc __entry-range1:outer { u:A u:inputF tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            __entry-range1:inner ${u:A} ${u:inputF} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 0 "__entry-range1:outer ${u:A} ${u:inputF} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc __entry-range1:inner { u:A u:inputF tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:i1 ${tcltmp:lo} } { ${v:i1} <= ${tcltmp:hi} } { incr v:i1 ${tcltmp:inc} } {
        # Var: $boolean v:t:12 VALUE_OF [boolean:__t:12]
        set v:t:12 [ expr { ${v:i1} == 0 } ]
        if { ${v:t:12} } {
            # Var: $string v:t:17 VALUE_OF [string:__t:17]
            # Var: $string v:t:16 VALUE_OF [string:__t:16]
            set v:t:17 "File \t${v:i1}"
            set v:t:16 "${v:t:17}data\t:"
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 0 [ list worm-argwait ${u:A} ${v:i1} ${v:t:16} ]
            turbine::reset_priority
        } else {
            # Var: string[int] t:33 EXPR_TEMPORARY wormSegment.swift:__entry():16:47
            # Var: $string v:t:27 VALUE_OF [string:__t:27]
            # Var: $string v:t:26 VALUE_OF [string:__t:26]
            # Var: $int v:t:35 VALUE_OF [int:__t:35]
            # Var: $string v:t:34 VALUE_OF [string:__t:34]
            # Var: $string$[int] v:t:33 VALUE_OF [string[int]:__t:33]
            # Var: $string v:alias:t:32 VALUE_OF [string:__alias:t:32]
            # Var: $int v:t:31 VALUE_OF [int:__t:31]
            # Var: $string v:alias:t:39 VALUE_OF [string:__alias:t:39]
            # Var: $int v:t:38 VALUE_OF [int:__t:38]
            lassign [ adlb::multicreate [ list container integer string 1 2 5 ] ] t:33
            turbine::c::log "allocated t:33=<${t:33}>"
            set v:t:27 "File \t${v:i1}"
            set v:t:26 "${v:t:27}data\t:"
            set v:t:35 [ expr { ${v:i1} - 1 } ]
            set v:t:34 [ turbine::container_lookup ${u:inputF} ${v:t:35} 0 0 ]
            set v:t:33 [ turbine::split_impl ${v:t:34} "," ]
            turbine::build_rec ${t:33} ${v:t:33} [ list container integer string ] 0 1
            set a:t:32 [ adlb::subscript_container ${t:33} 1 ]
            set v:alias:t:32 [ turbine::retrieve_string ${a:t:32} ]
            set v:t:31 [ turbine::parse_int_impl ${v:alias:t:32} 10 ]
            set a:t:39 [ adlb::subscript_container ${t:33} 2 ]
            set v:alias:t:39 [ turbine::retrieve_string ${a:t:39} CACHED 1 ]
            set v:t:38 [ turbine::parse_int_impl ${v:alias:t:39} 10 ]
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 0 [ list worm-argwait-1 ${u:A} ${v:i1} ${v:t:26} ${v:t:31} ${v:t:38} ]
            turbine::reset_priority
            adlb::write_refcount_decr ${t:33} 1
        }
    }
    set tcltmp:iters [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
    turbine::read_refcount_decr ${u:inputF} [ expr { ${tcltmp:iters} } ]
}


proc worm-argwait { u:A v:i1 v:t:16 } {
    # Var: $int v:x RENAMED [$int:__v:x]
    # Var: $string v:t:15 VALUE_OF [string:__t:15]
    # Var: $string v:t:14 VALUE_OF [string:__t:14]
    set v:x [wormSegmenter_wormSegmenterF ${v:i1} -1 -1 ]
    set v:t:15 "${v:t:16}${v:x}"
    set v:t:14 "${v:t:15}\n"
    turbine::container_insert ${u:A} ${v:i1} ${v:t:14} string 1
}


proc worm-argwait-1 { u:A v:i1 v:t:26 v:t:31 v:t:38 } {
    # Var: $int v:x:1 RENAMED [$int:__v:x]
    # Var: $string v:t:25 VALUE_OF [string:__t:25]
    # Var: $string v:t:24 VALUE_OF [string:__t:24]
    set v:x:1 [wormSegmenter_wormSegmenterF ${v:i1} ${v:t:31} ${v:t:38} ]
    set v:t:25 "${v:t:26}${v:x:1}"
    set v:t:24 "${v:t:25}\n"
    turbine::container_insert ${u:A} ${v:i1} ${v:t:24} string 1
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "__t:5" "wormSegment:9:28"
adlb::add_debug_symbol 2 "A" "wormSegment:8:0"
adlb::add_debug_symbol 3 "outputFile" "wormSegment:20:17"
adlb::add_debug_symbol 4 "inputF" "wormSegment:9:0"
adlb::add_debug_symbol 5 "__t:33" "wormSegment:__entry():16:47"
turbine::start swift:main swift:constants
turbine::finalize
