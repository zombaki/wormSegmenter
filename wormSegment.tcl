
# Generated by stc version 0.7.3
# date                    : 2017/07/28 14:11:35
# Turbine version         : 1.0.0
# Input filename          : /home/zombaki/Project/swiftCode/testFunc/cpp/newa/wormSegmenter/wormSegment.swift
# Output filename         : /home/zombaki/Project/swiftCode/testFunc/cpp/newa/wormSegmenter/wormSegment.tcl
# STC home                : /usr/lib/stc
# Turbine home            : /usr/lib/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : wormSegment.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : wormSegment.tcl
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /usr/lib/stc
# stc.turbine.version           : 1.0.0
# stc.turbine_home              : /usr/lib/turbine
# stc.version                   : 0.7.3

# Metadata:

package require turbine 1.0.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require wormsegmenter 0.0


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: string[int] u:A wormSegment.swift:8:0
    # Var: file u:outputFile wormSegment.swift:14:17
    lassign [ adlb::multicreate [ list container integer string 1 1000 1 ] ] u:A
    turbine::c::log "allocated u:A=<${u:A}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 2 ] ] [ list 1 ] ] u:outputFile
    turbine::set_filename_val ${u:outputFile} "output.txt"
    turbine::rule [ list ${u:A} ] "string_join-argwait ${u:A} {${u:outputFile}}"
    __entry-range1:outer ${u:A} 0 999 1
}


proc string_join-argwait { u:A u:outputFile } {
    # Var: $string$[int] v:A RENAMED [$string$[int]:__v:A]
    # Var: $string v:s RENAMED [$string:__v:s]
    # Var: $file v:outputFile VALUE_OF [file:outputFile]
    set v:A [ turbine::enumerate_rec ${u:A} [ list container string ] 0 1 ]
    set v:s [ turbine::string_join_impl ${v:A} "" ]
    set tcltmp:init_rc 2
    set v:outputFile [ turbine::create_local_file_ref "output.txt" ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:outputFile ${v:s}
    turbine::store_file ${u:outputFile} v:outputFile 0
}


proc __entry-range1:outer { u:A tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            __entry-range1:inner ${u:A} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 0 "__entry-range1:outer ${u:A} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc __entry-range1:inner { u:A tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:i1 ${tcltmp:lo} } { ${v:i1} <= ${tcltmp:hi} } { incr v:i1 ${tcltmp:inc} } {
        # Var: $string v:t:13 VALUE_OF [string:__t:13]
        # Var: $string v:t:12 VALUE_OF [string:__t:12]
        set v:t:13 "File \t${v:i1}"
        set v:t:12 "${v:t:13}data\t:"
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 [ list worm-argwait ${u:A} ${v:i1} ${v:t:12} ]
        turbine::reset_priority
    }
}


proc worm-argwait { u:A v:i1 v:t:12 } {
    # Var: $int v:x RENAMED [$int:__v:x]
    # Var: $string v:t:11 VALUE_OF [string:__t:11]
    # Var: $string v:t:10 VALUE_OF [string:__t:10]
    set v:x [wormSegmenter_wormSegmenterF ${v:i1} ]
    set v:t:11 "${v:t:12}${v:x}"
    set v:t:10 "${v:t:11}\n"
    turbine::container_insert ${u:A} ${v:i1} ${v:t:10} string 1
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "A" "wormSegment:8:0"
adlb::add_debug_symbol 2 "outputFile" "wormSegment:14:17"
turbine::start swift:main swift:constants
turbine::finalize
